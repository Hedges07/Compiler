import java.io.*;
import java.util.ArrayList;

public class A5 {
	static int pointer = -1;
	static ArrayList tokens = new ArrayList();

	public A5() {
		super();
	}
	public static void main (String [] args) throws Exception {
		// construct the token array
		BufferedWriter bw = new BufferedWriter (new FileWriter ("a5.output"));
		A5Scanner scanner = new A5Scanner (new FileInputStream (new File ("A5.tiny")));
		//note that yylex () is the default method to get the next token in scanner that is generated by JLlex
		Symbol token;
		while ((token = scanner.yylex()).sym != A5Sym.EOF){
			System.out.println(token.toString());
			tokens.add(token);
		}
		tokens.add(token); // add EOF as the last token in the array
		boolean legal = program() && nextToken().sym == A5Sym.EOF ;
		System.out.println(legal);
		bw.write((legal)?" legal ":" illegal ");
		bw.close();
	}

	/**  program-->statement program | program-->statement */
	/*
	static boolean program() throws Exception {
		int savePointer = pointer;
		if (statement() && program()) {
			System.out.println("      program-->statement program");
			return true;
		}
		pointer = savePointer;
		if (statement()) {
			System.out.println("      program-->statement");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	 */
	static boolean program() throws Exception {
		int savePointer = pointer;
		if (methodDecl()) {
			System.out.println("      Program -> MethodDecl");
			return true;
		}
		pointer = savePointer;
		if (methodDecl() && program()) {
			System.out.println("      Program -> MethodDecl MethodDecl* ");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	static boolean type() throws Exception {
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.INT) {
			System.out.println("      Type--INT");
			return true;
		}
		pointer = savePointer;
		if(nextToken().sym == A5Sym.REAL) {
			System.out.println("      Type-->REAL");
			return true;
		}
		pointer = savePointer;
		if(nextToken().sym == A5Sym.STRING) {
			System.out.println("      Type-->STRING");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean methodDecl() throws Exception {
		int savePointer = pointer;
		if(type() && nextToken().sym == A5Sym.MAIN && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN  && nextToken().sym == A5Sym.RPAREN && block()){
			System.out.println("		MethodDecl -> Type MAIN Id '(' ')' Block");
			return true;
		}
		pointer = savePointer;
		if(type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN  &&  nextToken().sym == A5Sym.RPAREN && block()){
			System.out.println("		MethodDecl -> Type Id '(' ')' Block");
			return true;
		}
		pointer = savePointer;
		if(type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN  && formalParams() && nextToken().sym == A5Sym.RPAREN && block()){
			System.out.println("		MethodDecl -> Type Id '(' FormalParams ')' Block");
			return true;
		}
		pointer = savePointer;
		if(type() && nextToken().sym == A5Sym.MAIN && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN  && formalParams() && nextToken().sym == A5Sym.RPAREN && block()){
			System.out.println("		MethodDecl -> Type MAIN Id '(' FormalParams ')' Block");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean formalParams() throws Exception {
		int savePointer = pointer;
		if (formalParam() && nextToken().sym == A5Sym.COMMA && formalParams()) {
			System.out.println("		FormalParams -> [FormalParam ( ',' FormalParam )* ]");
			return true;
		}
		pointer = savePointer;
		if (formalParam()) {
			System.out.println("		FormalParams -> FormalParam");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean formalParam() throws Exception {
		int savePointer = pointer;
		if (type() && nextToken().sym == A5Sym.ID) {
			System.out.println("		FormalParam -> Type Id");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean block() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.BEGIN && statements() && nextToken().sym == A5Sym.END) {
			System.out.println("		Block -> BEGIN Statement+ END");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean statements() throws Exception {
		int savePointer = pointer;
		if (statement() && statements()) {
			System.out.println("		Statement -> Statements");
			return true;
		}
		pointer = savePointer;
		if (statement()) {
			System.out.println("		Statement -> Statement");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean statement() throws Exception {
		int savePointer = pointer;
		if (block()) {
			System.out.println("      Statement -> Block;");
			return true;
		}
		pointer = savePointer;
		if (localVarDecl()) {
			System.out.println("      Statement -> LocalVarDecl;");
			return true;
		}
		pointer = savePointer;
		if (assignment()) {
			System.out.println("      Statement -> AssignStmt;");
			return true;
		}
		pointer = savePointer;
		if (returnStmt()) {
			System.out.println("      Statement -> ReturnStmt;");
			return true;
		}
		pointer = savePointer;
		if (ifStmt()) {
			System.out.println("      Statement -> ItStmt;");
			return true;
		}
		pointer = savePointer;
		if (writetmt()) {
			System.out.println("      Statement -> WriteStmt;");
			return true;
		}
		pointer = savePointer;
		if (readStmt()) {
			System.out.println("      Statement -> ReadStmt;");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean localVarDecl() throws Exception {
		int savePointer = pointer;
		if (type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.SEMI) {
			System.out.println("		LocalVarDecl -> Type Id ';'");
			return true;
		}
		pointer = savePointer;
		if (type() && assignment()) {
			System.out.println("		Type AssignStmt");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	/**    assignment--> ID=exp */
	static boolean  assignment() throws Exception {
		int savePointer= pointer;
		if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.ASSIGN && expr() && nextToken().sym==A5Sym.SEMI) {
			System.out.println("      AssignStmt  -> Id := Expression ';'");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.ASSIGN && nextToken().sym==A5Sym.QSTRING && nextToken().sym==A5Sym.SEMI) {
			System.out.println("      AssignStmt  -> Id := QString ';'");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean returnStmt() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.RETURN && expr() && nextToken().sym == A5Sym.SEMI) {
			System.out.println("		ReturnStmt -> RETURN Expression ';'");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean ifStmt() throws Exception {
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpr() && nextToken().sym == A5Sym.RPAREN && statement()){
			System.out.println("		IfStmt    -> IF '(' BoolExpression ')' Statement");
			return true;
		}
		pointer = savePointer;
		if(nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.LPAREN && boolExpr() && nextToken().sym == A5Sym.RPAREN && statement() && nextToken().sym == A5Sym.ELSE && statement()){
			System.out.println("		IfStmt    -> IF '(' BoolExpression ')' Statement ELSE Statement");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean writetmt() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.WRITE && nextToken().sym == A5Sym.LPAREN && expr() && nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.QSTRING && nextToken().sym == A5Sym.RPAREN && nextToken().sym == A5Sym.SEMI) {
			System.out.println("		WriteStmt -> WRITE '(' Expression ',' QString ')' ';'");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean readStmt() throws Exception {
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.READ && nextToken().sym == A5Sym.LPAREN && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.RPAREN && nextToken().sym == A5Sym.SEMI) {
			System.out.println("		ReadStmt  -> READ '(' Id ',' QString ')' ';'");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	/** expr--> multiplicativeExpr+expr | expr--> multiplicativeExpr */
	static boolean expr() throws Exception {
		int savePointer = pointer;
		if  (multiplicativeExpr() && nextToken().sym == A5Sym.PLUS && expr()) {
			System.out.println("		expr--> multiplicativeExpr + expr");
			return true;
		}
		pointer = savePointer;
		if  (multiplicativeExpr()) {
			System.out.println("      expr--> multiplicativeExpr");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	/** exprList --> expr exprList | empty */
	static boolean exprList() throws Exception {
		int savedPointer=pointer;
		if (expr() && exprList()) {
			return true;
		}
		pointer = savedPointer;
		if (expr()) {
			return true;
		}
		pointer = savedPointer;
		return false;
	}
	/** multiplicativeExpr --> factor * multiplicativeExpr | multiplicativeExpr--> factor */
	static boolean multiplicativeExpr() throws Exception {
		int savePointer = pointer;
		if (factor() && nextToken().sym == A5Sym.TIMES && multiplicativeExpr()) {
			System.out.println("      multiplicativeExpr-->factor * multiplicativeExpr");
			return true;
		}
		pointer = savePointer;
		if (factor()) {
			System.out.println("      multiplicativeExpr-->factor");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean primaryExpr() throws Exception {
		int savePointer = pointer;
		if(nextToken().sym == A5Sym.NUM) {
			System.out.println("      PrimaryExpr -> Num");
			return true;
		}
		pointer = savePointer;
		if(nextToken().sym == A5Sym.ID) {
			System.out.println("      PrimaryExpr -> Id");
			return true;
		}
		pointer = savePointer;
		if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN && expr() && nextToken().sym == A5Sym.RPAREN) {
			System.out.println("      PrimaryExpr -> '(' Expression ')'");
			return true;
		}
		pointer = savePointer;
		if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN && actualParams() && nextToken().sym == A5Sym.RPAREN) {
			System.out.println("      PrimaryExpr -> Id '(' ActualParams ')'");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean boolExpr() throws Exception{
		int savePointer = pointer;
		if (expr() && nextToken().sym == A5Sym.EQUAL && expr()) {
			System.out.println("		BoolExpression -> Expression '==' Expression");
			return true;
		}
		pointer = savePointer;
		if (expr() && nextToken().sym == A5Sym.NEQUAL && expr()) {
			System.out.println("		BoolExpression -> Expression '!=' Expression ");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym == A5Sym.FALSE) {
			System.out.println("		BoolExpression -> FALSE");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym == A5Sym.TRUE) {
			System.out.println("		BoolExpression -> TRUE");
			return true;
		}
		pointer = savePointer;
		return false;
	}
	static boolean actualParams() throws Exception{
		int savePointer = pointer;
		if (expr() && nextToken().sym == A5Sym.RPAREN && nextToken().sym == A5Sym.COMMA && expr()) {
			System.out.println("		ActualParams ->[Expression ( ',' Expression)]");
			return true;
		}
		pointer = savePointer;
		if (actualParams() && actualParams()) {
			System.out.println("		ActualParams ->[Expression ( ',' Expression)]*");
			return true;
		}
		pointer = savePointer;
		return false;
	}
		/** factor --> ID | NUMBER | functionCall | (Expr) */
	static boolean factor() throws Exception {
		int savePointer = pointer;
		if (functionCall()) {
			System.out.println("factor --> functionCall");
			return true;
		}
		pointer=savePointer;
		int sym=nextToken().sym;
		if (sym == A5Sym.ID || sym == A5Sym.NUM) {
			System.out.println("      factor-->ID | NUMBER");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym==A5Sym.LPAREN && expr() && nextToken().sym==A5Sym.RPAREN) {
			return true;
		}
		pointer = savePointer;
		return false;
	}
		/** functionCall-->ID(exprList) */
	static boolean functionCall() throws Exception  {
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.LPAREN && exprList() && nextToken().sym == A5Sym.RPAREN) {
			return true;
		}
		pointer = savePointer;
		return false;
	}

	static Symbol nextToken() {
		if (pointer < tokens.size()-1) {
			pointer++;
			Symbol token = (Symbol) tokens.get(pointer);
			System.out.println ("next Token: " + token.toString());
			return token;
		}
		else
			return null;
	}
}
