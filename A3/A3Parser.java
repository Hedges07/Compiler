
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 04 23:29:46 EST 2021
//----------------------------------------------------

import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 04 23:29:46 EST 2021
  */
public class A3Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A3Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A3Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\004\003\000\002\002\004\000\002\004" +
    "\004\000\002\003\005\000\002\003\005\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\006\011\000\002\006\010\000\002\010\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\012" +
    "\004\000\002\012\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\013\005\000\002" +
    "\013\004\000\002\014\006\000\002\014\006\000\002\015" +
    "\005\000\002\016\007\000\002\016\011\000\002\017\011" +
    "\000\002\020\011\000\002\033\003\000\002\033\004\000" +
    "\002\036\005\000\002\036\004\000\002\021\003\000\002" +
    "\021\004\000\002\023\005\000\002\023\004\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\022\006" +
    "\000\002\030\005\000\002\030\005\000\002\027\003\000" +
    "\002\027\005\000\002\024\004\000\002\024\002\000\002" +
    "\026\004\000\002\025\005\000\002\025\002\000\002\035" +
    "\003\000\002\035\002\000\002\034\005\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\010\031\011\032\007\033\005\001\002\000" +
    "\012\002\001\031\011\032\007\033\005\001\002\000\006" +
    "\013\ufff3\014\ufff3\001\002\000\004\002\150\001\002\000" +
    "\006\013\ufff4\014\ufff4\001\002\000\006\013\013\014\012" +
    "\001\002\000\006\013\ufff5\014\ufff5\001\002\000\004\021" +
    "\144\001\002\000\004\014\014\001\002\000\004\021\015" +
    "\001\002\000\012\022\uffcf\031\011\032\007\033\005\001" +
    "\002\000\004\014\143\001\002\000\004\022\025\001\002" +
    "\000\006\022\uffcc\034\021\001\002\000\010\031\011\032" +
    "\007\033\005\001\002\000\004\022\uffd0\001\002\000\006" +
    "\022\uffcc\034\021\001\002\000\004\022\uffcd\001\002\000" +
    "\004\011\026\001\002\000\024\004\034\005\037\006\035" +
    "\007\030\011\026\014\040\031\011\032\007\033\005\001" +
    "\002\000\012\002\ufff8\031\ufff8\032\ufff8\033\ufff8\001\002" +
    "\000\004\021\135\001\002\000\026\004\034\005\037\006" +
    "\035\007\030\011\026\012\ufff1\014\040\031\011\032\007" +
    "\033\005\001\002\000\030\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\014\uffec\031\uffec\032\uffec" +
    "\033\uffec\001\002\000\004\014\131\001\002\000\010\014" +
    "\052\021\055\025\051\001\002\000\004\021\114\001\002" +
    "\000\030\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\031\ufff0\032\ufff0\033\ufff0\001\002" +
    "\000\004\021\106\001\002\000\004\030\050\001\002\000" +
    "\030\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\031\uffef\032\uffef\033\uffef\001\002\000" +
    "\030\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\014\uffea\031\uffea\032\uffea\033\uffea\001\002\000" +
    "\030\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\014\uffee\031\uffee\032\uffee\033\uffee\001\002\000" +
    "\030\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\014\uffed\031\uffed\032\uffed\033\uffed\001\002\000" +
    "\004\012\047\001\002\000\030\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\001\002\000\032\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\001\002\000\012\014\052\021\055" +
    "\024\057\025\051\001\002\000\024\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\034\uffd8" +
    "\001\002\000\026\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\100\022\uffd7\023\uffd7\026\uffd7\027\uffd7\034\uffd7\001\002" +
    "\000\020\015\074\016\075\022\uffe0\023\uffe0\026\uffe0\027" +
    "\uffe0\034\uffe0\001\002\000\024\015\uffdc\016\uffdc\017\067" +
    "\020\066\022\uffdc\023\uffdc\026\uffdc\027\uffdc\034\uffdc\001" +
    "\002\000\010\014\052\021\055\025\051\001\002\000\004" +
    "\023\061\001\002\000\004\023\060\001\002\000\030\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\014\uffe6\031\uffe6\032\uffe6\033\uffe6\001\002\000\030\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\014\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002\000\004\022" +
    "\063\001\002\000\024\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\022\uffd6\023\uffd6\026\uffd6\027\uffd6\034\uffd6\001\002\000" +
    "\020\015\uffdb\016\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb" +
    "\034\uffdb\001\002\000\010\014\052\021\055\025\051\001" +
    "\002\000\010\014\ufff9\021\ufff9\025\ufff9\001\002\000\010" +
    "\014\ufffa\021\ufffa\025\ufffa\001\002\000\024\015\uffd9\016" +
    "\uffd9\017\067\020\066\022\uffd9\023\uffd9\026\uffd9\027\uffd9" +
    "\034\uffd9\001\002\000\020\015\uffda\016\uffda\022\uffda\023" +
    "\uffda\026\uffda\027\uffda\034\uffda\001\002\000\014\022\uffdf" +
    "\023\uffdf\026\uffdf\027\uffdf\034\uffdf\001\002\000\010\014" +
    "\052\021\055\025\051\001\002\000\010\014\ufffc\021\ufffc" +
    "\025\ufffc\001\002\000\010\014\ufffb\021\ufffb\025\ufffb\001" +
    "\002\000\020\015\074\016\075\022\uffdd\023\uffdd\026\uffdd" +
    "\027\uffdd\034\uffdd\001\002\000\014\022\uffde\023\uffde\026" +
    "\uffde\027\uffde\034\uffde\001\002\000\010\014\052\021\055" +
    "\025\051\001\002\000\004\022\105\001\002\000\006\022" +
    "\uffd2\034\103\001\002\000\010\014\052\021\055\025\051" +
    "\001\002\000\004\022\uffd1\001\002\000\024\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5" +
    "\034\uffd5\001\002\000\010\014\052\021\055\025\051\001" +
    "\002\000\004\034\110\001\002\000\004\024\111\001\002" +
    "\000\004\022\112\001\002\000\004\023\113\001\002\000" +
    "\030\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\014\uffe2\031\uffe2\032\uffe2\033\uffe2\001\002\000" +
    "\010\014\052\021\055\025\051\001\002\000\004\022\123" +
    "\001\002\000\006\026\117\027\120\001\002\000\010\014" +
    "\052\021\055\025\051\001\002\000\010\014\052\021\055" +
    "\025\051\001\002\000\004\022\uffd3\001\002\000\004\022" +
    "\uffd4\001\002\000\024\004\034\005\037\006\035\007\030" +
    "\011\026\014\040\031\011\032\007\033\005\001\002\000" +
    "\030\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\125\011\uffe4" +
    "\012\uffe4\014\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002\000" +
    "\024\004\034\005\037\006\035\007\030\011\026\014\040" +
    "\031\011\032\007\033\005\001\002\000\030\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\001\002\000\004\023\130\001" +
    "\002\000\030\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\014\uffe5\031\uffe5\032\uffe5\033\uffe5\001" +
    "\002\000\006\023\133\030\050\001\002\000\030\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\001\002\000\030\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\014" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\001\002\000\004\012\ufff2" +
    "\001\002\000\004\014\136\001\002\000\004\034\137\001" +
    "\002\000\004\024\140\001\002\000\004\022\141\001\002" +
    "\000\004\023\142\001\002\000\030\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\001\002\000\006\022\uffce\034\uffce\001" +
    "\002\000\012\022\uffcf\031\011\032\007\033\005\001\002" +
    "\000\004\022\146\001\002\000\004\011\026\001\002\000" +
    "\012\002\ufff7\031\ufff7\032\ufff7\033\ufff7\001\002\000\004" +
    "\002\000\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\010\004\005\006\003\007\007\001\001\000" +
    "\010\004\150\006\003\007\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\015\024\016\026\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\021\001\001" +
    "\000\006\007\015\026\022\001\001\000\002\001\001\000" +
    "\004\025\023\001\001\000\002\001\001\000\004\010\026" +
    "\001\001\000\026\007\032\010\035\011\030\012\044\013" +
    "\040\014\043\015\042\016\045\017\041\020\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\032\010" +
    "\035\011\030\012\133\013\040\014\043\015\042\016\045" +
    "\017\041\020\031\001\001\000\002\001\001\000\004\014" +
    "\131\001\001\000\010\021\052\022\053\033\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\052\022\053\033\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\072\036\071\001\001\000\006\023\063\032\064\001\001" +
    "\000\010\021\052\022\053\033\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\070\032\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\075\022\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\072\036\076\001" +
    "\001\000\002\001\001\000\012\021\052\022\053\027\100" +
    "\033\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\052\022\053\033\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\052\022\053\033\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\052\022" +
    "\053\030\114\033\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\052\022\053\033\121\001\001\000" +
    "\010\021\052\022\053\033\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\032\010\035\011\123\013" +
    "\040\014\043\015\042\016\045\017\041\020\031\001\001" +
    "\000\002\001\001\000\024\007\032\010\035\011\125\013" +
    "\040\014\043\015\042\016\045\017\041\020\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\015\024\144\026\017\001" +
    "\001\000\002\001\001\000\004\010\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A3Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A3Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A3Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A3Parser$actions {
  private final A3Parser parser;

  /** Constructor */
  CUP$A3Parser$actions(A3Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A3Parser$do_action(
    int                        CUP$A3Parser$act_num,
    java_cup.runtime.lr_parser CUP$A3Parser$parser,
    java.util.Stack            CUP$A3Parser$stack,
    int                        CUP$A3Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A3Parser$result;

      /* select the action based on the action number */
      switch (CUP$A3Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameterList ::= actualParams 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(26/*parameterList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameterList ::= parameterList COMMA actualParams 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(26/*parameterList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // optionalParameterList ::= 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(27/*optionalParameterList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // optionalParameterList ::= parameterList 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(27/*optionalParameterList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // extraParams ::= 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*extraParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // extraParams ::= COMMA formalParam extraParams 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*extraParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formalParam ::= type ID 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(20/*formalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // formalParams ::= 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*formalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // formalParams ::= formalParam extraParams 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*formalParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // actualParams ::= expression COMMA expression 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(21/*actualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actualParams ::= expression 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(21/*actualParams*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolExpr ::= expression NEQUAL expression 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(22/*boolExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolExpr ::= expression EQUAL expression 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(22/*boolExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primaryExpr ::= ID LPAREN actualParams RPAREN 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primaryExpr ::= LPAREN expression RPAREN 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primaryExpr ::= ID 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primaryExpr ::= NUM 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*primaryExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primaryExprs ::= multiplyDivide primaryExpr 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*primaryExprs*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primaryExprs ::= multiplyDivide primaryExpr primaryExprs 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*primaryExprs*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // multiplicativeExpr ::= primaryExpr primaryExprs 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // multiplicativeExpr ::= primaryExpr 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*multiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicativeExprs ::= addSubtract multiplicativeExpr 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(28/*multiplicativeExprs*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // multiplicativeExprs ::= addSubtract multiplicativeExpr multiplicativeExprs 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(28/*multiplicativeExprs*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= multiplicativeExpr multiplicativeExprs 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(25/*expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= multiplicativeExpr 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(25/*expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // readStmt ::= READ LPAREN ID COMMA QSTRING RPAREN SEMI 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*readStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // writeStmt ::= WRITE LPAREN expression COMMA QSTRING RPAREN SEMI 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*writeStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ifStmt ::= IF LPAREN boolExpr RPAREN statement ELSE statement 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*ifStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ifStmt ::= IF LPAREN boolExpr RPAREN statement 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*ifStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // returnStmt ::= RETURN expression SEMI 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*returnStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignStmt ::= ID ASSIGN QSTRING SEMI 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*assignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignStmt ::= ID ASSIGN expression SEMI 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*assignStmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // localVarDecl ::= type assignStmt 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // localVarDecl ::= type ID SEMI 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= writeStmt 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= ifStmt 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= readStmt 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= assignStmt 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= returnStmt 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= localVarDecl 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= block 
            {
              String RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statements ::= statement 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statements ::= statement statements 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*statements*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= STRING 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= REAL 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= BEGIN statements END 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*block*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDecl ::= type ID LPAREN formalParams RPAREN block 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodDecl ::= type MAIN ID LPAREN formalParams RPAREN block 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // multiplyDivide ::= DIVIDE 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(24/*multiplyDivide*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // multiplyDivide ::= TIMES 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(24/*multiplyDivide*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // addSubtract ::= MINUS 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(23/*addSubtract*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // addSubtract ::= PLUS 
            {
              String RESULT = null;
		
              CUP$A3Parser$result = new java_cup.runtime.Symbol(23/*addSubtract*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= multiplicativeExpr MINUS multiplicativeExpr 
            {
              Integer RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= multiplicativeExpr PLUS multiplicativeExpr 
            {
              Integer RESULT = null;
		 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= methodDecl program 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).value;
		RESULT = e + 1;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		RESULT = start_val;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A3Parser$parser.done_parsing();
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= methodDecl 
            {
              Integer RESULT = null;
		 RESULT = 1;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

